Advanced Solidity Concepts

contract ownership
gas costs
code optimization
security


Immutability of contracts
After you deploy a contract to Ethereum, it is immutable. Can never be modified.

if there is a flaw in your contract code, there is no way for you to patch it later.
you would have to tell your users to start using a different smart contract address that
has the fix.

This is downside as well as a feature of smart contract.

There is a huge risk if the contract was updated and making our contract useless.

so instead of hard coding the crypto kitties contract address into our DApp, we should
probably has a setKittyContractAddress function that lets us change this address in the
future in case something happens to the cryptokittes contract

Ownable Contracts
did you spot the security home in the previous chapter ?
write a function to pass address of external contracts bring support to handle cases
where when a contract is republished, we can reconnect our dapp back. But it also brings
a risk that some one can set an invalid contract address and break it.

To handle this issue, a common practice has emerged to make contracts ownable.

constructor of the contract captures the owner on creation which is stored as state variable

TransferOwnership function has a modifier called onlyOwner which means this function
can be called by current owner only.

_; need to understand


Gas
In Solidiy, your users have to pay every time they execute a function on your DApp using a currency
called gas. Users buy gas with Ether, so your users have to spend ETH in order to execute  functions
on your DApp.

Amount of gas needed to execute a function depends on how complex that function's logic is.
Each individual operation has a gas cost based on how much computing resourcs will be required to
perform that operation.

becoz running functions cost real money for your users, code optimization is much more important
in Ethereum than in other programming languages. if your code is sloppy, user will have to pay
premium to execute your functions.

sidechains vs Ethereum network

Struct packing to save gas

There is no benefit of using uint8 vs uint as sub datatypes
but there is an exception to this inside struct


Time Units
now will return the current unix timestamp of the latest block
Solidity provides some native units for dealing with time

Public functions and Security


Note: If a view function is called internally from another function in the same contract that is not a view function, it will still cost gas. This is because the other function creates a transaction on Ethereum, and will still need to be verified from every node. So view functions are only free when they're called externally.


Storage is expensive
One of the most expensive operations in Solidity is using storage - particularly writes
Every time you write or change peice of data, you are updating in block chain.


Payable Modifier
================
Payable functions are part of what makes Solidity and Ethereum so cool- They are a special type of functions
that can receive Ether

When you call an API function on a normal web server, you cannot send US dollars along with your function call.

But in Ethereum, because both the money and data and the contract code itself all live on Ethereum, it is possible for you
to call a function and pay money to the contract at the same time.

example

contract OnlineStore {
  function buySomething() external payable{
    require(msg.value == 0.001 ether);
    transferThing(msg.sender);
  }
}

here msg.vale is a way to see how much Ether is sent to the contract

Note: If a function is not marked payable and you try to send Ether to i as above, the function will reject
your transaction.


Withdraws
=========

After you send Ether to a contract, it gets stored in the contract's Ethereum account, and it will be trapped there
unless you add a function to withdraw the Ether from the contract

contract GetPaid is Ownable {
  function withdraw() external onlyOwner {
     owner.transfer(this.balance);
  }
}

You can use transfer to send funds to any Ethereum address. For example, you could have a function that transfers
Ether back to the msg.sender if they overpaid for an item

uint itemfee = 0.001 ether;
msg.sender.transfer(msg.value - itemFee);

ERC721 Standard

Overflows and Underflows using SafeMath
